<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="$this.Icon" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        xgB7hqUAOUFrAAAAGADn4+8AISxjADlNewD3+/8A7+/3AAAEOQAQEEIAEBxSABgcSgCUy/8AISRSABgo
        WgApMFoAjLbnACk4awB7otYAMUlzAJSatQBCSXMAY4q9AHN5nADn6+8AAAApAAAAMQAIEDkAnM//ABAY
        QgCMtu8AKShaADE0YwAxPGMAc57OAIyOpQBKYZQASmmcAFJtpQBrbYwAa3WUADk8awB7fZwA//v/APf3
        /wD39/cA7/P3AO/r9wDn5+8AAAQxAAAIOQAIDDkA1tvnAAgQQgCt3/8Apd//ABAUQgCl1/8AEBRKABAc
        SgDGz94AnNP/ABgYSgAYIEoAlMf/ABggUgCUy/cAISBSAJTD9wAYJFoAIShSAIy67wApLFoAITBjAK2u
        xgCErucAKTRrAISu3gApPGsAOThjADlJewBzms4ASklzAIySrQBrjsYAUlV7AEJdjABrir0AWl2EAFp9
        rQBjaYwAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAABAQEBAQEBAQEBZQodF39CQiA4XjFmAQEBAQEBAQEBAQEB
        AQEBAQEBTwx2UFBRUVFRUVFQUFQdIgEBAQEBAQEBAQEBAQEBYop1UFFRUVFRUVFRUVFRUVBqDGMBAQEB
        AQEBAQEBAWaMUFFRUVFRUVFRUVFRUVFRUVFQOCIBAQEBAQEBAQEiRlBRUVFQUFFRUVFRUVFRUVFRUVFQ
        dgcBAQEBAQEBZUZQUVFRUIdyUFFRUVFRUVFRUVFRUVFQQmcBAQEBAWIIUFFRUVAmC45QUVFRUVFRUVFR
        UVFRUVFQhmMBAQEBBVBRUVFRUBY1fj9RUVFRUVFRUVFRUVFRUVFQNwEBAWVCUVFRUVFRUE0TUFFRUVFR
        UVFRUVFRUVFRUVFqOgEBilBRUVFRUVFRaFFRUVFRUVFRUVFRUVFRUVFRUVBfAT19UFFRUVFQUFBQUVFR
        UVFRUVFRUVFRUVFRUVFRUWw+GVFRUVBQaXJ4H2pRUA5QUVFRUVE/UVBRUVFRUVFRUIEtUFFQRRRHd0MD
        fkmQPEFQUFFRUCwyMA5RP2lRUVFQkYxQUCwDNRp0cDU1bgtuQ4hKUVBRUDwQhQ5sG1FRUVEkBFEOAm0a
        d34riIuLWRBTCws2alBRDkUQbw6LgFBRUSpCUQ5dLyZyamhQUFBQaRIzSQshUFFQBnlbOV0uDlFRQEJR
        UINcOVBQUVFRUVFRUA5RhVU7UBwybhQOKIJoUVFAV1FRUTRRUVFRUVFRUVFRUVEOLIVQBiVuTQ5xe3xQ
        UXoIUFFRUVFRUVFRUVFRUVFRUVFQUVEOXG5IUFGEjQ5RYBVQUVFRUVFRUVFRUVFRUVFRUVFRUVAfKFBR
        DiFNUFAPc1FRUVFRUVFRUVFRUVFRUVFRUVFRUVBQUVFQDQlQUDFiVlBRUVFRUVFRUVFRUVFRUVFRUVFR
        UVFRUVE0XVFAPgFLUFFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFpUE4BAWR6UVFRUVFRUVFRUVFRUVFR
        UVFRUVFRUVFRUVBSZwEBARhQUVFRUVFRUVFRUVFRUVFRUVFRUVFRUVFRUC0BAQEBASdQUVFRUVFRUVFR
        UVFRUVFRUVFRUVFRUVAXYwEBAQEBHlhQUVFRUVFRUVFRUVFRUVFRUVFRUVFQRGcBAQEBAQEBEYZQUVFR
        UVFRUVFRUVFRUVFRUVFRUERrAQEBAQEBAQEBZY9QUVFRUVFRUVFRUVFRUVFRUVBMZwEBAQEBAQEBAQEB
        AQUqUFFRUVFRUVFRUVFRUVBvWj0BAQEBAQEBAQEBAQEBAT6KIFFQUVFRUVFRUFF2DGcBAQEBAQEBAQEB
        AQEBAQEBAQFjIwwpf29AIIlhCh4BAQEBAQEBAQEBAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA
        AAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAAA=
</value>
  </data>
</root>